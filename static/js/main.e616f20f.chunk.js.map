{"version":3,"sources":["Components/Titles.js","Components/Search.js","Components/Results.js","Components/Links.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Search","onSubmit","getWord","type","name","placeholder","Results","searchedWord","definition1","error","Links","href","onClick","showModal","Modal","state","email","message","setDefaultState","_this","setState","onClose","e","updateEmailState","submit","preventDefault","firebase","ref","push","_this2","this","show","children","onChange","target","value","React","Component","API_KEY","App","setErrorState","_callee","word","API_CALL","result","regenerator_default","wrap","_context","prev","next","elements","fetch","sent","json","shortdef","stop","Components_Titles","Components_Results","Components_Search","Components_Modal","Components_Links","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e616f20f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = (props) => (\r\n  <div className=\"title\">\r\n    <h1 className=\"main-title\">Quick-Dictionary</h1>\r\n    <p className=\"sub-title\">Easy, Fast, Accurate</p>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from 'react';\r\n\r\nconst Search = (props) => (\r\n  <form className=\"search\" onSubmit={props.getWord}>\r\n    <div className=\"search-bar-div\">\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        name=\"word\"\r\n        placeholder=\"Enter a word...\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <button className=\"button\" name=\"search\">Search</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nconst Results = (props) => (\r\n  <div className=\"results\">\r\n    {props.searchedWord && <h1>{props.searchedWord}:</h1>}\r\n    {props.definition1 && <p>{props.definition1}</p>}\r\n    {props.error && <p>{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Results;\r\n","import React from 'react';\r\n\r\nconst Links = (props) => (\r\n  <div className=\"links-container\">\r\n    <a href=\"http://www.github.com/lathan1623\" className=\"link\"></a>\r\n    <div className=\"email-signup\">\r\n      <button className=\"email-button\" onClick={props.showModal}>\r\n        Sign Up\r\n      </button>\r\n      <p> Join our email list! </p>\r\n    </div>\r\n    <a href=\"http://www.twitter.com/lathan1623\" className=\"link2\"></a>\r\n  </div>\r\n);\r\n\r\nexport default Links;\r\n","/* eslint-disable no-invalid-this */\r\nimport React from 'react';\r\nimport * as firebase from 'firebase';\r\n\r\n/**\r\n * Controls the Modal the appears when user clicks sign up button\r\n */\r\nclass Modal extends React.Component {\r\n  /**\r\n   * initializes state values\r\n   */\r\n  state = {\r\n    email: null,\r\n    message: `Join our mailing list for updates on new \r\n    features and insider information:`,\r\n  }\r\n  /**\r\n  *  helper method that returns state of modal to default\r\n  */\r\n  setDefaultState = () => {\r\n    this.setState({\r\n      email: null,\r\n      message: `Join our mailing list for updates on new \r\n      features and insider information:`,\r\n    });\r\n  }\r\n  /**\r\n   * @param {Event} e\r\n   */\r\n  onClose = (e) => {\r\n    this.props.onClose && this.props.onClose(e);\r\n    this.setDefaultState();\r\n  }\r\n  /**\r\n   * @param {String} email user inputed email\r\n   */\r\n  updateEmailState = (email) => {\r\n    this.setState({\r\n      email: email,\r\n    });\r\n  }\r\n  /**\r\n   * @param {String} e\r\n   */\r\n  submit = (e) => {\r\n    e.preventDefault();\r\n    const database = firebase.database();\r\n    const ref = database.ref('Email');\r\n    ref.push(this.state.email);\r\n    this.setState({\r\n      message: 'Thanks for signing up!',\r\n      email: null,\r\n    });\r\n  }\r\n  /**\r\n   * Render element in react\r\n   * @return {function} rendered JSX\r\n   */\r\n  render() {\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"modal-background\">\r\n        {this.props.children}\r\n        <div className=\"modal-main\">\r\n          <p>{this.state.message}</p>\r\n          <form className=\"modal-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"enter email\"\r\n              onChange={(e) => this.updateEmailState(e.target.value)}\r\n            />\r\n            <button\r\n              className=\"submit-button\"\r\n              onClick={this.submit}>Submit\r\n            </button>\r\n          </form>\r\n          <button className=\"modal-close-button\" onClick={(e) => {\r\n            this.onClose(e);\r\n          }}>\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Titles from './Components/Titles';\r\nimport Search from './Components/Search';\r\nimport Results from './Components/Results';\r\nimport Links from './Components/Links';\r\nimport Modal from './Components/Modal';\r\n\r\nconst API_KEY = '3110d706-0b47-4ffa-8b16-ed33de45f0ef';\r\n/**\r\n * Main App Class\r\n */\r\nclass App extends React.Component {\r\n  /**\r\n   * Initializes default states\r\n   */\r\n  state = {\r\n    show: false,\r\n    definition1: null,\r\n    error: null,\r\n    searchedWord: null,\r\n  }\r\n  /**\r\n   * Toggles if modal renders\r\n   */\r\n  showModal = () => {\r\n    this.setState({\r\n      show: !this.state.show,\r\n    });\r\n  }\r\n  /**\r\n   * Changes state of only error\r\n   */\r\n  setErrorState = () => {\r\n    this.setState({\r\n      searchedWord: null,\r\n      definition1: null,\r\n      error: 'Please enter an English word.',\r\n    });\r\n  }\r\n  /**\r\n   * Gets short definition of word from JSON generated by API\r\n   * @param {event} e\r\n   */\r\n  getWord = async (e) => {\r\n    e.preventDefault();\r\n    const word = e.target.elements.word.value;\r\n    const API_CALL = await fetch('https://dictionaryapi.com/api/v3/references/collegiate/json/'\r\n     + word + '?key=' + API_KEY);\r\n    if (word) {\r\n      const result = await API_CALL.json();\r\n      if (result[0].shortdef) {\r\n        this.setState({\r\n          searchedWord: word,\r\n          definition1: result[0].shortdef[0],\r\n          error: null,\r\n        });\r\n      } else {\r\n        this.setErrorState();\r\n      }\r\n    } else {\r\n      this.setErrorState();\r\n    }\r\n  }\r\n  /**\r\n   * Renders App in webpage\r\n   * @return {function} rendered JSX\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"main\">\r\n          <div className=\"row\" >\r\n            <Titles/>\r\n          </div>\r\n          <div className=\"row2\">\r\n            <Results\r\n              searchedWord={this.state.searchedWord}\r\n              definition1={this.state.definition1}\r\n              error={this.state.error}\r\n            />\r\n            <Search getWord = {this.getWord}/>\r\n            <div className=\"row3\">\r\n              <Modal\r\n                show={this.state.show}\r\n                onClose={this.showModal}\r\n              >\r\n              </Modal>\r\n              <Links showModal={this.showModal} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport './App.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCUg4drt_zQ9IbmO1zzL1ZFJr9FnX1BjQs\",\r\n    authDomain: \"dictionary-12c83.firebaseapp.com\",\r\n    databaseURL: \"https://dictionary-12c83.firebaseio.com\",\r\n    projectId: \"dictionary-12c83\",\r\n    storageBucket: \"dictionary-12c83.appspot.com\",\r\n    messagingSenderId: \"124821818362\",\r\n    appId: \"1:124821818362:web:193813f67ab1db6e\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}